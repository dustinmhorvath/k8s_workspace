---
apiVersion: v1
kind: Service
metadata:
  name: pihole-dns
spec:
  selector:
    app: pihole
  ports:
    - port: 53
      protocol: UDP
      targetPort: dns-udp
      name: dns-udp
  loadBalancerIP: 192.168.1.220
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: pihole
  labels:
    app: pihole
spec:
  selector:
    app: pihole
  ports:
  - port: 80
    targetPort: 80
    name: pihole-gui
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pihole-dnsmasq-pv
spec:
  storageClassName: local-path
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  csi:
    driver: cephfs.csi.ceph.com
    volumeHandle: pihole-dnsmasq-pv
    nodeStageSecretRef:
      name: docker-ceph
      namespace: default
    nodePublishSecretRef:
      name: docker-ceph
      namespace: default
    volumeAttributes:
      monitors: 192.168.1.131:6789,192.168.1.132:6789,192.168.1.133:6789
      rootPath: '/docker/pihole/etc-dnsmasq.d'
      provisionVolume: "false"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pihole-dnsmasq-pvc
spec:
  storageClassName: local-path
  accessModes:
   - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: pihole-dnsmasq-pv
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pihole-config-pv
spec:
  storageClassName: local-path
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  csi:
    driver: cephfs.csi.ceph.com
    volumeHandle: pihole-config-pv
    nodeStageSecretRef:
      name: docker-ceph
      namespace: default
    nodePublishSecretRef:
      name: docker-ceph
      namespace: default
    volumeAttributes:
      monitors: 192.168.1.131:6789,192.168.1.132:6789,192.168.1.133:6789
      rootPath: /docker/pihole/etc-pihole
      provisionVolume: "false"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pihole-config-pvc
spec:
  storageClassName: local-path
  accessModes:
   - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: pihole-config-pv
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pihole
spec:
  selector:
    matchLabels:
      app: pihole # has to match .spec.template.metadata.labels
  serviceName: "pihole"
  replicas: 1
  template:
    metadata:
      labels:
        app: pihole # has to match .spec.selector.matchLabels
    spec:
      #hostNetwork: true
      terminationGracePeriodSeconds: 10
      containers:
      - name: pihole
        image: pihole/pihole:latest
        imagePullPolicy: Always
        securityContext:
          privileged: true
        ports:
          - name: dns-udp 
            containerPort: 53
            protocol: UDP
          - name: dns-tcp
            containerPort: 53
            protocol: TCP
          - name: dns-udp-other
            containerPort: 67
            protocol: UDP
          - name: pihole-gui
            containerPort: 80
            protocol: TCP
        env:
        - name: TZ
          value: America/Chicago
        volumeMounts:
        - name: pihole-config
          mountPath: /etc/pihole
        - name: pihole-dnsmasq
          mountPath: /etc/dnsmasq.d
            #livenessProbe:
            #  httpGet:
            #    path: /admin.index.php
            #    port: pihole-gui
            #  initialDelaySeconds: 60
            #  failureThreshold: 10
            #  timeoutSeconds: 5
  
            #readinessProbe:
            #  httpGet:
            #    path: /admin.index.php
            #    port: pihole-gui
            #  initialDelaySeconds: 60
            #  failureThreshold: 3
            #  timeoutSeconds: 5
      volumes:
      - name: pihole-config
        persistentVolumeClaim:
          claimName: pihole-config-pvc
          readOnly: false
      - name: pihole-dnsmasq
        persistentVolumeClaim:
          claimName: pihole-dnsmasq-pvc
          readOnly: false
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pihole
  labels:
    app: pihole
  annotations:
    #nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

spec:
  rules:
  - host: pihole.perihelion.host
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: pihole
            port:
              number: 80
  tls:
  - hosts:
    - pihole.perihelion.host
    secretName: pihole.perihelion.host
