---
- hosts: k8s
  become: yes
  max_fail_percentage: 01
  vars:
    kubeconfig_remote: /etc/rancher/rke2/rke2.yaml
    # Get first entry in group "master_primary"
    primary: "{{ groups['master_primary'][0] }}"
    tls_name: rancher.perihelion.host
    RKE2_MINOR: 28
  environment:
    PATH: "$PATH:/usr/local/bin/:/usr/bin/"
  tasks:
    # Using autopart for now, so these partitions don't exist
    #- name: Fix disk size
    #  shell: '{{ item }}'
    #  loop:
    #    - '/usr/sbin/parted -s -a opt /dev/vda "print free" "resizepart 2 100%" "print free"'
    #    - '/sbin/pvresize /dev/vda2'

    #- name: Create a logical volume of 512g.
    #  community.general.lvol:
    #    vg: local
    #    lv: var
    #    size: 25g
    #    resizefs: true

    - service:
        name: firewalld
        state: stopped
        enabled: no 

    - name: Create rke2 path
      file:
        path: /etc/rancher/rke2/
        state: directory

    - name: Enable modules for ipvs
      community.general.modprobe:
        name: "{{ item }}"
        state: present
        persistent: present
      loop:
        - ip_vs_wrr
        - ip_vs_sh
        - ip_vs
        - ip_vs_rr

    - name: Enable module
      shell: yum module enable container-tools:rhel8 -y

    - name: Replace a localhost entry with our own
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        regexp: '^net.bridge.bridge-nf-call-iptables'
        line: 'net.bridge.bridge-nf-call-iptables=1'
    - name: Replace a localhost entry with our own
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        regexp: '^net.ipv4.conf.all.proxy_arp'
        line: 'net.ipv4.conf.all.proxy_arp=1'
    - name: Replace a localhost entry with our own
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        regexp: '^net.ipv4.conf.all.forwarding'
        line: 'net.ipv4.conf.all.forwarding=1'

    - template:
        src: rke2_repo.conf.j2
        dest: /etc/yum.repos.d/rancher-rke2-1-{{ RKE2_MINOR }}-latest.repo

          #- rpm_key:
          #    state: present
          #    key: https://rpm.rancher.io/public.key

    - name: Install pip3
      register: yum_results
      until: yum_results is not failed
      retries: 5
      delay: 10
      yum:
        name:
          - python3-pip
        state: present
        lock_timeout: 300

    - name: install pre-requisites
      pip:
        name:
          - kubernetes

#    - name: Install rke2 with script
#      shell: 'curl -sfL https://get.rke2.io | sh -'

    - name: Start primary master
      block:
      - name: Install rke2 and dependencies
        register: yum_results
        until: yum_results is not failed
        retries: 5
        delay: 10
        yum:
          name:
            - rke2-server
            - tar
          state: present
          lock_timeout: 300
      - name: install pre-requisites
        pip:
          name:
            - openshift
            - pyyaml
      - name: Write config file on primary master
        ansible.builtin.blockinfile:
          create: yes
          path: /etc/rancher/rke2/config.yaml
          block: |
            token: jgjurnghjenvugbnsk
            tls-san:
              - {{ tls_name }}
            node-taint:
              - "CriticalAddonsOnly=true:NoExecute"
#            kube-proxy-arg:
#              - proxy-mode=ipvs
#              - ipvs-strict-arp=true
      - name: Start primary master services
        service:
          name: rke2-server
          state: started
          enabled: yes
      - name: Wait for node to be up
        ansible.builtin.shell: '/var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get nodes | grep $HOSTNAME | grep -v "NotReady"'
        register: get_nodes_output
        changed_when: false
        retries: 10
        delay: 30
        until: get_nodes_output is not failed
      - name: Get the primary master token
        shell: cat /var/lib/rancher/rke2/server/node-token | grep server
        register: primary_token

      ##### kubeconfig stuff
      - name: Copy kubeconfig to remote ~/.kube/
        copy:
          remote_src: yes
          src: "{{ kubeconfig_remote }}"
          dest: "~/.kube/config"
          mode: 0600
      - name: Fetch kubeconfig to local
        fetch:
          src: "~/.kube/config"
          dest: "~/.kube/config"
          flat: yes
      - name: replace host ip address in the kubeconfig
        delegate_to: localhost
        replace:
          path: ~/.kube/config
          regexp: "https://127.0.0.1:6443"
          replace: "https://{{ hostvars[primary].ansible_host }}:6443"

      - name: check if helm is installed /usr/local/bin/helm
        stat:
          #path: $HOME/.config/helm/repositories.yaml
          path: /usr/local/bin/helm
        register: helm_check
      - name: Download get-helm-3
        get_url:
          url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          dest: ~/get-helm-3.sh
          mode: "700"
        when: not helm_check.stat.exists
      - name: install helm if not exist
        command: >-
          ~/get-helm-3.sh
        when: not helm_check.stat.exists
      when: "'master_primary' in group_names"

    - name: Start secondary masters
      block:
  
      - name: Install rke2 and dependencies
        register: yum_results
        until: yum_results is not failed
        retries: 5
        delay: 10
        yum:
          name:
            - rke2-agent
            - tar
          state: present
          lock_timeout: 300
      - name: Write config files on secondary masters
        ansible.builtin.blockinfile:
          create: yes
          path: /etc/rancher/rke2/config.yaml
          block: |
            server: https://{{ hostvars[primary].ansible_host }}:9345
            token: {{ hostvars[primary].primary_token.stdout }}
            tls-san:
              - {{ tls_name }}
#            kube-proxy-arg:
#              - proxy-mode=ipvs
#              - ipvs-strict-arp=true
      - name: Start secondary master services
        register: secondary_start
        until: secondary_start.status.ActiveState == "active"
        retries: 5
        delay: 10
        service:
          name: rke2-agent
          state: started
          enabled: yes
# I'm going to assume that waiting for the service above is sufficient
#      - name: Wait for nodes to be up
#        delegate_to: "{{ primary }}"
#        ansible.builtin.shell: '/var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get nodes | grep $HOSTNAME | grep -v "NotReady"'
#        register: get_nodes_output
#        retries: 10
#        delay: 30
#        until: get_nodes_output is not failed
      when: "'master_primary' not in group_names"

- hosts: master_primary
  max_fail_percentage: 01
  become: yes
  environment:
    PATH: "$PATH:/usr/local/bin/:/usr/bin/"
  vars:
    kubeconfig_remote: /etc/rancher/rke2/rke2.yaml
  tasks:
    - name: Create manifest temp path
      file:
        path: ~/manifests/
        state: directory
    - name: Copy nginx daemonset config
      copy:
        src: nginx_daemonset.yml
        dest: /var/lib/rancher/rke2/server/manifests/rke2-ingress-nginx-config.yaml

    - name: Add helm repositories
      kubernetes.core.helm_repository:
        name: "{{ item.name }}"
        repo_url: "{{ item.url }}"
      register: derp
      loop:
        - name: rancher-latest
          url: 'https://releases.rancher.com/server-charts/latest'
        - name: jetstack
          url: 'https://charts.jetstack.io'
        - name: nfs-subdir-external-provisioner
          url: 'https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/'
        - name: rancher-charts
          url: 'https://charts.rancher.io'
        - name: metallb
          url: 'https://metallb.github.io/metallb'
        - name: ceph-csi
          url: 'https://ceph.github.io/csi-charts'
        - name: netdata
          url: 'https://netdata.github.io/helmchart/'

#    - name: create some secrets
#      shell: |
#        ## these files have to be named tls.crt/tls.key/cacerts.pem. you can use symlinks though
#        kubectl -n cattle-system create secret tls tls-rancher-ingress --cert=/root/ssl/tls.crt --key=/root/ssl/tls.key
#        kubectl -n cattle-system create secret generic tls-ca --from-file=/root/ssl/cacerts.pem
#      ignore_errors: yes

    - name: Create ceph-rbd namespaces
      kubernetes.core.k8s:
        name: ceph-csi-rbd
        api_version: v1
        kind: Namespace
        state: present

    - name: Get ceph-rbd manifests
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/ceph/ceph-csi/master/deploy/rbd/kubernetes/{{ item.url }}"
        dest: "ceph-rbd/"
      loop:
        - url: 'csidriver.yaml'
        - url: 'csi-provisioner-rbac.yaml'
        - url: 'csi-nodeplugin-rbac.yaml'
        - url: 'csi-rbdplugin-provisioner.yaml'
        - url: 'csi-rbdplugin.yaml'

           # Testing without these
#          dest: 'ceph-rbd/csi-nodeplugin-rbac.yaml'

    - name: Change ceph-csi namespaces
      ansible.builtin.replace:
        path: "ceph-rbd/{{ item }}"
        regexp: '(\s+)namespace: .*'
        replace: '\1namespace: ceph-csi-rbd'
      loop:
        - 'csidriver.yaml'
        - 'csi-provisioner-rbac.yaml'
        - 'csi-nodeplugin-rbac.yaml'
        - 'csi-rbdplugin-provisioner.yaml'
        - 'csi-rbdplugin.yaml'
#
#    - name: Apply ceph manifests and provisioner
#      kubernetes.core.k8s:
#        src: "~/manifests/{{ item }}"
#      loop:
#        - 'csi-provisioner-rbac.yaml'
#        - 'csi-nodeplugin-rbac.yaml'
#        - 'csi-rbdplugin-provisioner.yaml'
#        - 'csi-rbdplugin.yaml'
#
#    - name: Create storage class
#      register: sc_create
#      until: sc_create is not failed
#      retries: 5
#      delay: 10
#      kubernetes.core.k8s:
#        definition: "{{ lookup('file', '00_csi-rbd-sc.yml' ) | from_yaml }}"
#        state: present
#        apply: yes

    - name: Deploy cert-manager
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        release_namespace: cert-manager
        create_namespace: true
        #wait: True
        #replace: True
        update_repo_cache: True
        values:
          installCRDs: true
      ignore_errors: yes

    - name: Apply cert-manager config
      register: cm_config
      until: cm_config is not failed
      retries: 5
      delay: 10
      kubernetes.core.k8s:
        definition: "{{ lookup('file', item ) | from_yaml }}"
        state: present
        apply: yes
      loop:
        - 00_letsencrypt_nginx_prod.yml
        - 00_letsencrypt_nginx.yml

    - name: Deploy metallb
      kubernetes.core.helm:
        name: metallb
        chart_ref: metallb/metallb
        release_namespace: metallb-system
        create_namespace: true
        #wait: True
        #replace: True
        update_repo_cache: True
      ignore_errors: yes
      # Create metallb configmap
    - name: Create configmap
      register: metallb_config
      until: metallb_config is not failed
      retries: 5
      delay: 10
      kubernetes.core.k8s:
        definition: "{{ lookup('file', item ) | from_yaml }}"
        state: present
        apply: yes
      loop:
        - metallb_l2adv.yaml
        - metallb_ipaddresspool.yml
        - metallb_ipvs.yml

#    - name: Deploy ceph-csi-rbd
#      kubernetes.core.helm:
#        name: ceph-csi-rbd
#        chart_ref: ceph-csi/ceph-csi-rbd
#        release_namespace: ceph-csi-rbd
#        create_namespace: true
#        wait: True
#        #replace: True
#        update_repo_cache: True
#        values:
#          storageClass:
#            create: true
#          readAffinity:
#            enabled: true
#          rbac:
#            create: true
#      ignore_errors: yes


    - name: Deploy ceph-csi-cephfs
      #ignore_errors: yes
      kubernetes.core.helm:
        name: ceph-csi-cephfs
        chart_ref: ceph-csi/ceph-csi-cephfs
        release_namespace: ceph-csi-cephfs
        create_namespace: true
        timeout: 10m
        #wait: True
        #replace: True
        update_repo_cache: True
        values:
          storageClass:
            create: true
          readAffinity:
            enabled: true

    - name: Deploy netdata
      kubernetes.core.helm:
        name: netdata
        chart_ref: netdata/netdata
        release_namespace: netdata
        create_namespace: true
        #wait: True
        update_repo_cache: True
        #replace: true
        values:
          service:
            type: LoadBalancer
          deploymentStrategy:
            type: Recreate
          ingress:
            hosts:
              - monitor.perihelion.host
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
          parent:
            claiming:
              enabled: true
              room: "0fbd34b3-73f1-43c6-9004-fa64b593fe90"
            database:
              storageclass: csi-rbd-sc
            alarms:
              storageclass: csi-rbd-sc
          k8sState:
            persistence:
              storageclass: csi-rbd-sc
      ignore_errors: yes

        #    - name: Deploy netdata PVCs
        #      register: netdata_pvc
        #      until: netdata_pvc is not failed
        #      retries: 5
        #      delay: 10
        #      kubernetes.core.k8s:
        #        definition: "{{ lookup('file', item ) | from_yaml }}"
        #        state: present
        #        apply: yes
        #      loop:
        #        - 01_netdata_pvc_alarms.yml
        #        - 01_netdata_pvc_database.yml

#    - name: Deploy Rancher
#      kubernetes.core.helm:
#        name: rancher
#        chart_ref: rancher-latest/rancher
#        chart_version: 2.6.6
#        release_namespace: cattle-system
#        create_namespace: true
#        wait: True
#        replace: True
#        update_repo_cache: True
#        values:
#          hostname: k8s.ku.edu
#          privateCA: true
#          ingress:
#            tls:
#              source: secret
#          bootstrapPassword: SomePasswordHere
#      # Ignoring errors, since, this doesn't really do "upgrades" correctly like the command line `helm upgrade` does.
#      ignore_errors: yes
#          #tls: external 
#      ## You can reset the admin password like this:
#      ## kubectl -n cattle-system exec $(kubectl -n cattle-system get pods -l app=rancher | grep '1/1' | head -1 | awk '{ print $1 }') -- reset-password
#
#    - name: Deploy Rancher-backup CRDs
#      kubernetes.core.helm:
#        name: rancher-backup-crd
#        chart_ref: rancher-charts/rancher-backup-crd
#        release_namespace: cattle-resources-system
#        create_namespace: true
#        wait: True
#        replace: True
#        update_repo_cache: True
#
#    - name: Deploy Rancher backup operator
#      kubernetes.core.helm:
#        name: rancher-backup
#        chart_ref: rancher-charts/rancher-backup
#        release_namespace: cattle-resources-system
#        create_namespace: true
#        wait: True
#        replace: True
#        update_repo_cache: True
#        values:
#          persistence:
#            enabled: true
#            storageClass: nfs-client
#            size: 2Gi
#
#    - name: Create rancher backer schedule
#      kubernetes.core.k8s:
#        definition: "{{ lookup('file', 'rancher_backup_schedule.yaml') | from_yaml }}"
#        state: present
#        apply: yes
